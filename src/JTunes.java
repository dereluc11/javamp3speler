
/**
 *
 * @author Zico & Lucas
 */

/*
Bronnen:
chooser:
https://docs.oracle.com/javase/7/docs/api/javax/swing/JFileChooser.html

add music:
https://www.youtube.com/watch?v=_twvxE0xsoo

lijst selecteren:
https://stackoverflow.com/questions/3519072/java-jlist-see-if-anything-is-selected

javazoom:
http://www.javazoom.net/index.shtml

multi threading:
https://stackoverflow.com/questions/17013486/java-jlayer-application-freezes-while-playing-song
https://stackoverflow.com/questions/17758411/java-creating-a-new-thread
https://docs.oracle.com/javase/tutorial/essential/concurrency/runthread.html

mp3 verwijderen:
https://docs.oracle.com/javase/tutorial/essential/io/delete.html

input en outputstream:
https://docs.oracle.com/javase/tutorial/essential/io/file.html

metadata library
http://www.beaglebuddy.com/
*/

import com.beaglebuddy.mp3.MP3;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.*;

public class JTunes extends javax.swing.JFrame {

    Thread playing = new Thread();

    public JTunes() {
        initComponents();
        createList();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        alleNummers = new javax.swing.JScrollPane();
        lijst_allenummers = new javax.swing.JList<>();
        favorieten = new javax.swing.JScrollPane();
        lijst_Favorieten = new javax.swing.JList<>();
        button_stop = new javax.swing.JButton();
        button_Add = new javax.swing.JButton();
        button_Play = new javax.swing.JButton();
        label_Titel = new javax.swing.JLabel();
        label_jaar = new javax.swing.JLabel();
        label_artiest = new javax.swing.JLabel();
        label_genre = new javax.swing.JLabel();
        textfield_Titel = new javax.swing.JTextField();
        textfield_Year = new javax.swing.JTextField();
        textfield_Artist = new javax.swing.JTextField();
        textfield_Genre = new javax.swing.JTextField();
        button_Filter = new javax.swing.JButton();
        button_Favorite = new javax.swing.JButton();
        button_Remove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lijst_allenummers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        alleNummers.setViewportView(lijst_allenummers);

        tabs.addTab("Alle nummers", alleNummers);

        lijst_Favorieten.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        favorieten.setViewportView(lijst_Favorieten);

        tabs.addTab("favorieten", favorieten);

        button_stop.setText("Stop");
        button_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_stopActionPerformed(evt);
            }
        });

        button_Add.setText("Add music");
        button_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_AddActionPerformed(evt);
            }
        });

        button_Play.setText("Play");
        button_Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_PlayActionPerformed(evt);
            }
        });

        label_Titel.setText("Titel:");

        label_jaar.setText("Jaar:");

        label_artiest.setText("Artiest:");

        label_genre.setText("Genre:");

        button_Filter.setText("Apply Filter");
        button_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_FilterActionPerformed(evt);
            }
        });

        button_Favorite.setText("Add to Favorite");
        button_Favorite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_FavoriteActionPerformed(evt);
            }
        });

        button_Remove.setText("Remove Title");
        button_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_RemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_Play, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(button_stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(button_Favorite, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_Remove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_Add, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_Titel)
                            .addComponent(label_jaar)
                            .addComponent(label_artiest)
                            .addComponent(label_genre))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textfield_Year)
                            .addComponent(textfield_Artist)
                            .addComponent(textfield_Titel)
                            .addComponent(textfield_Genre, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)))
                    .addComponent(button_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_Titel)
                            .addComponent(textfield_Titel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button_Favorite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label_jaar)
                            .addComponent(textfield_Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(label_artiest)
                                    .addComponent(textfield_Artist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(button_Remove)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(label_genre)
                                    .addComponent(textfield_Genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(button_Add)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_Play)
                    .addComponent(button_stop))
                .addContainerGap(190, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //filters
    private void button_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_FilterActionPerformed
        String titel = textfield_Titel.getText();
        String jaar = textfield_Year.getText();
        String artiest = textfield_Artist.getText();
        String genre = textfield_Genre.getText();

        if(!titel.equals("")){
            filterMuziek("titel", titel);
        }else if(!jaar.equals("")){
            filterMuziek("jaar", jaar);
        }else if(!artiest.equals("")){
            filterMuziek("artiest", artiest);
        }else if(!genre.equals("")){
            filterMuziek("genre", genre);
        }else{
            createList();
        }
    }//GEN-LAST:event_button_FilterActionPerformed

    //add music
    private void button_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_AddActionPerformed

        //maak de verkenner venster aan
        JFileChooser chooser = new JFileChooser();

        //Maak een filter die alleen mp3 bestanden
        FileNameExtensionFilter filter = new FileNameExtensionFilter("MP3 Files", "mp3");

        //set de filter
        chooser.setFileFilter(filter);

        //set basis locatie voor het venster op home
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));

        //open het venster en sla het gekozen bestand op in returnVal
        int returnVal = chooser.showOpenDialog(chooser);

        //check of het een mp3 bestand is
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //maak een File aan met de data uit de verkenner
            File selectedFile = chooser.getSelectedFile();

            //maak het path aan naar de muziek map
            String path = Paths.get(".").toAbsolutePath().normalize().toString();
            path += "/Music";

            //Maak een nieuwe File aan met het path naar muziek map + naam van het bestand die je wilt kopieëren
            File newFile = new File(path + "/" + selectedFile.getName());

            //kopieer het bestand en zet hem in de muziek map
            try {
                Files.copy(selectedFile.toPath(), newFile.toPath());
            } catch (IOException ex) {
                Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
            }

            //roep deze funtie aan
            createList();

        }
    }//GEN-LAST:event_button_AddActionPerformed

    //add to favorite
    private void button_FavoriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_FavoriteActionPerformed
        editFavoriteList(false, false);
    }//GEN-LAST:event_button_FavoriteActionPerformed

    //verwijder muziek
    private void button_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_RemoveActionPerformed
        //lees geselecteerde element uit
        String song = "";

        //maak boolean voor lijst check
        boolean allenummers = false;

        //check uit welke lijst hij komt
        if (!lijst_Favorieten.isSelectionEmpty()) {
            editFavoriteList(true, false);
            allenummers = false;
        } else if (!lijst_allenummers.isSelectionEmpty()) {
            song = lijst_allenummers.getSelectedValue();
            allenummers = true;
        } else {
            //doe hier iets
        }

        //verwijder uit muziek map of favoriete lijst
        if (allenummers) {
            editFavoriteList(true, true);

            String path = Paths.get(".").toAbsolutePath().normalize().toString();
            path += "/Music/" + song;

            try {
                Files.delete(Paths.get(path));
            } catch (IOException ex) {
                Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //reload lijsten
        createList();
    }//GEN-LAST:event_button_RemoveActionPerformed

    //afspelen muziek
    private void button_PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_PlayActionPerformed
        String song = "";

        //kies het geselecteerd nummer
        if (!lijst_Favorieten.isSelectionEmpty()) {
            song = lijst_Favorieten.getSelectedValue();
        } else if (!lijst_allenummers.isSelectionEmpty()) {
            song = lijst_allenummers.getSelectedValue();
        } else {
            //doe hier iets please! I have no purpose
        }

        //haal het mp3 bestand op
        //maak path aan
        String path = Paths.get(".").toAbsolutePath().normalize().toString();
        path += "/Music/" + song;

        File song_File = new File(path);

        try {
            FileInputStream FIS = new FileInputStream(song_File);
            BufferedInputStream BIS = new BufferedInputStream(FIS);

            play_song(BIS);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_button_PlayActionPerformed

    private void button_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_stopActionPerformed
        playing.stop();
    }//GEN-LAST:event_button_stopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTunes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTunes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTunes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTunes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTunes().setVisible(true);
            }
        });
    }
    
    public void filterMuziek(String soort, String data){
        
        //maak een nieuwe lijst model
        DefaultListModel filteredList = new DefaultListModel();
        //maak een nieuwe array
        File[] paths;
        //vul de array
        paths = searchMusicFolder();
        
        //voor elk element in de array zoek welke overeen komt met de filter en zoja zet hem in de lijst
        for (File Songpath : paths) {
           
            MP3 song = null;
            try {
                song = new MP3(Songpath.getPath());
            } catch (IOException ex) {
                Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
            }
            
           if(soort.equals("titel"))
           {
               System.out.println(song.getBand());
               if(song.getTitle().equals(data)){
               filteredList.addElement(Songpath.getName());
               }
           }
           else if(soort.equals("jaar"))
           {
              int jaar = Integer.parseInt(data);
              if(song.getYear() == jaar){
               filteredList.addElement(Songpath.getName());
               }
           }
           else if(soort.equals("artiest"))
           {
               if(song.getBand().equals(data)){
               filteredList.addElement(Songpath.getName());
               }
           }
           else if(soort.equals("genre")){
                if(song.getMusicType().equals(data)){
                filteredList.addElement(Songpath.getName());
               }
           }else{
               //geen filters doe dan de hele lijst
               createList();
           }
        }
        
        //set model aan de list
        lijst_allenummers.setModel(filteredList);
    }

    //als je het programma opstart leest hij de muziek map en maakt hij een lijst
    public void createList() {

        //maak beide DefaultListModel
        DefaultListModel alleNummersList = new DefaultListModel();
        DefaultListModel favoriteList = new DefaultListModel();

        //maak een File array
        File[] paths;

        //roep functie aan en zet het in de array
        paths = searchMusicFolder();

        //voor elk element in de array. voeg de naam van het bestand toe aan de List
        for (File Songpath : paths) {
            alleNummersList.addElement(Songpath.getName());
        }

        //set model aan de list
        lijst_allenummers.setModel(alleNummersList);

        //maak bestand naam
        String fileName = "favoritList.bin";

        try {
            //maak inputstream en zoek voor bestand met bestandnaam
            ObjectInputStream is = new ObjectInputStream(new FileInputStream(fileName));
            //bestand gevonden? cast het bestand en zet hem in de pist
            favoriteList = (DefaultListModel) is.readObject();
        } catch (FileNotFoundException ex) {

        } catch (IOException ex) {

        } catch (ClassNotFoundException ex) {

        }
        //set model naar de list
        lijst_Favorieten.setModel(favoriteList);
    }

    public void editFavoriteList(boolean remove, boolean alles) {
        //maak een defaultlistodel aan
        DefaultListModel favoriteList = new DefaultListModel();

        //maak string met naam bestand
        String fileName = "favoritList.bin";

        try {
            //maak inputstream en zoek naar bestand met fileName
            ObjectInputStream IS = new ObjectInputStream(new FileInputStream(fileName));
            //lees het gevonden bestand en cast hem en zet het in de DefaultListModel
            favoriteList = (DefaultListModel) IS.readObject();
        } catch (FileNotFoundException ex) {

        } catch (IOException ex) {

        } catch (ClassNotFoundException ex) {

        }

        //put in favorite list
        if (remove) {
            String song = "";
            //haal het geselecteerde bestand op en verwijder het uit favorieten lijst
            if (alles) {
                song = lijst_allenummers.getSelectedValue();
            } else {
                song = lijst_Favorieten.getSelectedValue();
            }

            favoriteList.removeElement(song);
        } else {
            //get selected item en voeg hem toe aan de favorieten lijst       
            String song = lijst_allenummers.getSelectedValue();
            favoriteList.addElement(song);
        }

        //update favorite list
        lijst_Favorieten.setModel(favoriteList);
        //save favorite list

        try {
            //maak outputstream
            ObjectOutputStream OS = new ObjectOutputStream(new FileOutputStream(fileName));
            //maak het bestand en sla hem op
            OS.writeObject(favoriteList);
            //sluit stream
            OS.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //leest de muziek folder en geeft een file array
    public static File[] searchMusicFolder() {
        //maak path aan
        String path = Paths.get(".").toAbsolutePath().normalize().toString();
        path += "/Music";

        //maak leeg File object
        File filePath = null;

        //cast het path in een File Object
        filePath = new File(path);

        //zet allen bestanden in de muziek map in de array
        File[] paths = filePath.listFiles();

        //geef de array terug
        return paths;
    }

    public void play_song(BufferedInputStream BIS) {

        playing.stop();

        playing = new Thread() {

            public void run() {
                try {
                    Player player = new Player(BIS);
                    player.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(JTunes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        };
        playing.start();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane alleNummers;
    private javax.swing.JButton button_Add;
    private javax.swing.JButton button_Favorite;
    private javax.swing.JButton button_Filter;
    private javax.swing.JButton button_Play;
    private javax.swing.JButton button_Remove;
    private javax.swing.JButton button_stop;
    private javax.swing.JScrollPane favorieten;
    private javax.swing.JLabel label_Titel;
    private javax.swing.JLabel label_artiest;
    private javax.swing.JLabel label_genre;
    private javax.swing.JLabel label_jaar;
    private javax.swing.JList<String> lijst_Favorieten;
    private javax.swing.JList<String> lijst_allenummers;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextField textfield_Artist;
    private javax.swing.JTextField textfield_Genre;
    private javax.swing.JTextField textfield_Titel;
    private javax.swing.JTextField textfield_Year;
    // End of variables declaration//GEN-END:variables
}
